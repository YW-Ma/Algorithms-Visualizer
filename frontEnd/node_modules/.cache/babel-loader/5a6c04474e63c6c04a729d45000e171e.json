{"ast":null,"code":"import _defineProperty from \"/home/cdz/Code/FrontEnd/algorithm-visualization-for-Mr-Huang/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/cdz/Code/FrontEnd/algorithm-visualization-for-Mr-Huang/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/cdz/Code/FrontEnd/algorithm-visualization-for-Mr-Huang/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cdz/Code/FrontEnd/algorithm-visualization-for-Mr-Huang/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cdz/Code/FrontEnd/algorithm-visualization-for-Mr-Huang/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cdz/Code/FrontEnd/algorithm-visualization-for-Mr-Huang/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cdz/Code/FrontEnd/algorithm-visualization-for-Mr-Huang/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cdz/Code/FrontEnd/algorithm-visualization-for-Mr-Huang/frontEnd/src/app/component/GraphSVG.js\";\n//import d3 from './d3.v4.min.js';\n//window.d3 = d3;\n//import $ from 'jquery';  //引入jquery\nimport Graph from \"./Graph.js\";\nimport MyMenu from \"./MyMenu.js\";\nimport eventProxy from \"../eventProxy.js\";\nimport { assertFunctionParent } from \"babel-types\";\n\nrequire('../../assets/play.png');\n\nrequire('../../assets/pause.png');\n\nvar React = require('react'); //readme: 学长的代码中node的改变是通过state.S_NODE实现，edge(颜色)的改变是通过this.props.link实现!!!!!\n//经补充修改后，边上路径长度的改变通过state.S_EDGE实现\n//import stepData from \"./testData.js\";\n\n\nvar $ = window.jQuery;\nvar stepData = null;\nvar _name = []; //存储点名\n//let STEP_COUNT = 0;　　　//学长以STEP_COUNT记录每一个动作的编号（是动作不是帧！！）->改为每一帧的编号\n\nvar actionStep = {}; //用于存储步骤动作信息,eg:   {3:[3,4,5,6]}表示第三帧包含动作3、4、５、６\n\nvar STEP_COUNT = 1; //全局记录当前演示的帧数\n\nwindow.question = true;\n\nvar GraphSVG =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GraphSVG, _React$Component);\n\n  //其属性来自Panel...this.pros的传递,包括updtaState、node、link\n  function GraphSVG(props) {\n    var _this;\n\n    _classCallCheck(this, GraphSVG);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GraphSVG).call(this, props));\n    _this.state = {}; //注意：关于点、边的颜色\n    //ＤＦＳ后台传递的颜色：初始化边表示（１０，１０，１０），初始点表示(91,155,2１3),选中点边表示（255,0,0）\n    //DJ后台传递颜色:初始化边（１０，１０，１０），初始化点（９１，１５５，２１３），\n\n    _this.DEFAULT_LINK_COLOR = \"#3a6bdb\"; //默认是(浅蓝色)\n\n    _this.INITIAL_LINK_COLOR = \"#0a0a0a\"; //初始化后边的颜色\n\n    _this.INITIAL_NODE_COLOR = \"#5B9BD5\"; //初始化后点的颜色\n\n    _this.SELECTED_LINK_COLOR = \"#ff0000\"; //选中的边，红色\n\n    _this.SELECTED_NODE_COLOR = \"#ff0000\"; //选中的点     \n    //this.path = null;\n\n    _this.state.speed = 0.5;\n    _this.state.play = \"stop\";\n    _this.state.start = \"\";\n    _this.state.end = \"\";\n    _this.state.S_NODE = new Map(); //更新点的颜色;　　　　　　　　　Map是一组键值对的结构，具有极快的查找速度(误以为是Map.js导出的Map类)\n\n    _this.state.S_EDGE = new Map(); //更新边的距离\n\n    _this.state.question = true;\n    _this.state.S_NODE_DIS = new Map(); //更新点到起点的距离\n\n    _this.state.S_NODE_INFO = new Map(); //更新点旁边的其他信息，如显示不等式\n\n    return _this;\n  }\n\n  _createClass(GraphSVG, [{\n    key: \"render\",\n    value: function render() {\n      this.clcMaxMin();\n      var nodes = this.renderNode();\n      var links = this.renderLink();\n      var controlstate = this.state.play === \"play\" ? \"pauseState\" : \"playState\";\n      return React.createElement(\"div\", {\n        id: \"graphWrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"100%\",\n          backgroundColor: \"#FFF\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        ref: \"graph\",\n        width: \"100%\",\n        height: \"100%\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        onContextMenu: function onContextMenu(e) {\n          e.preventDefault();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, links, nodes))), React.createElement(\"div\", {\n        id: \"tool\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \" \\u63D0\\u95EE \", React.createElement(\"input\", {\n        id: \"question_checkbox\",\n        type: \"checkbox\",\n        checked: this.state.question,\n        onChange: this.checkChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), \" \"), React.createElement(\"div\", {\n        id: \"speed\",\n        title: \"\\u901F\\u5EA6\",\n        onClick: this.changeSpeed.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"speedValue\",\n        style: {\n          width: this.state.speed * 100 + \"%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"prev\",\n        title: \"\\u4E0A\\u4E00\\u6B65\",\n        onClick: this.animate_back.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"start\",\n        title: \"\\u5F00\\u59CB/\\u6682\\u505C\",\n        className: controlstate,\n        onClick: this.play.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"next\",\n        title: \"\\u4E0B\\u4E00\\u6B65\",\n        onClick: this.animate_forward.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"end\",\n        title: \"\\u7ED3\\u675F\",\n        onClick: this.stop.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"reset\",\n        title: \"\\u590D\\u4F4D\",\n        onClick: this.reSet.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })));\n    } //右上角全部复位！\n\n  }, {\n    key: \"reSet\",\n    value: function reSet() {\n      //复位！\n      stepData = null;\n      _name = []; //存储点名\n\n      actionStep = {}; //用于存储步骤动作信息,eg:   {3:[3,4,5,6]}表示第三帧包含动作3、4、５、６\n\n      STEP_COUNT = 1; //全局记录当前演示的帧数\n\n      window.question = true;\n      this.resetColor();\n      this.state.speed = 0.5;\n      this.state.play = \"stop\";\n      this.state.start = \"\";\n      this.state.end = \"\";\n      this.state.S_NODE = new Map(); //更新点的颜色;　　　　　　　　　Map是一组键值对的结构，具有极快的查找速度(误以为是Map.js导出的Map类)\n\n      this.state.S_EDGE = new Map(); //更新边的距离\n\n      this.state.question = true;\n      this.state.S_NODE_DIS = new Map(); //更新点到起点的距离\n\n      this.state.S_NODE_INFO = new Map(); //更新点旁边的其他信息，如显示不等式\n    } //是否提问状态改变\n\n  }, {\n    key: \"checkChange\",\n    value: function checkChange(e) {\n      window.question = e.target.checked;\n      console.log(window.question);\n      this.setState({\n        question: !this.state.question\n      });\n    }\n  }, {\n    key: \"clcMaxMin\",\n    value: function clcMaxMin() {\n      var _this2 = this;\n\n      var max_lng = -Infinity,\n          min_lng = Infinity;\n      var max_lat = -Infinity,\n          min_lat = Infinity;\n      this.mid_lng = 0;\n      this.mid_lat = 0;\n      this.props.node.forEach(function (node) {\n        if (node.lat > max_lat) max_lat = node.lat;\n        if (node.lat < min_lat) min_lat = node.lat;\n        if (node.lng > max_lng) max_lng = node.lng;\n        if (node.lng < min_lng) min_lng = node.lng;\n        _this2.mid_lng += node.lng;\n        _this2.mid_lat += node.lat;\n      });\n      this.max_lng = max_lng;\n      this.min_lng = min_lng;\n      this.max_lat = max_lat;\n      this.min_lat = min_lat;\n      this.mid_lng /= this.props.node.length;\n      this.mid_lat /= this.props.node.length;\n    }\n  }, {\n    key: \"clcCoordinate\",\n    value: function clcCoordinate(lng, lat) {\n      var w = this.refs.graph.clientWidth;\n      var h = this.refs.graph.clientHeight;\n      var margin = 50; // w = (w-margin - margin)/(this.max_lat-this.min_lat + 0.001)*(lat-this.min_lat) + margin;\n      // h = h - ( (h-margin - margin)/(this.max_lng-this.min_lng + 0.001)*(lng-this.min_lng) + margin ) ;\n\n      w = (w - margin - margin) / (this.max_lng - this.min_lng + 0.001) * (lng - this.min_lng) + margin;\n      h = h - ((h - margin - margin) / (this.max_lat - this.min_lat + 0.001) * (lat - this.min_lat) + margin);\n      return [w, h];\n    }\n  }, {\n    key: \"renderNode\",\n    value: function renderNode() {\n      var _this3 = this;\n\n      var nodes = this.props.node;\n      var svg = nodes.map(function (node) {\n        var _this3$clcCoordinate = _this3.clcCoordinate(node.lng, node.lat),\n            _this3$clcCoordinate2 = _slicedToArray(_this3$clcCoordinate, 2),\n            x = _this3$clcCoordinate2[0],\n            y = _this3$clcCoordinate2[1];\n\n        var name = node.name;\n\n        var setSE = _this3.setSE.bind(_this3);\n\n        var color = null;\n        var distance = '';\n        var info = ''; //显示不等式\n\n        if (_this3.state.start === node.name) {\n          color = \"#CCFFFF\";\n        }\n\n        if (_this3.state.end === node.name) {\n          color = \"#CC6699\";\n        }\n\n        if (_this3.state.S_NODE.has(node.name)) {\n          color = _this3.state.S_NODE.get(node.name);\n        }\n\n        if (_this3.state.S_NODE_DIS.has(node.name)) {\n          distance = _this3.state.S_NODE_DIS.get(node.name);\n        }\n\n        if (_this3.state.S_NODE_INFO.has(node.name)) {\n          info = _this3.state.S_NODE_INFO.get(node.name);\n        }\n\n        var data = {\n          name: name,\n          x: x,\n          y: y,\n          setSE: setSE,\n          color: color,\n          distance: distance,\n          info: info\n        }; //把data作为属性传递给Node\n\n        return React.createElement(Node, Object.assign({\n          key: \"node\" + node.name\n        }, data, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        })); //Node类在此脚本末尾！\n        //react利用key来识别组件，它是一种身份标识标识,与props中的属性不同！！！\n      });\n      return svg;\n    }\n  }, {\n    key: \"renderLink\",\n    value: function renderLink() {\n      var _this4 = this;\n\n      var links = this.props.link;\n      var svg = links.map(function (link) {\n        if (!link.polyline.isVisible()) return;\n\n        var _this4$clcCoordinate = _this4.clcCoordinate(link.node1.lng, link.node1.lat),\n            _this4$clcCoordinate2 = _slicedToArray(_this4$clcCoordinate, 2),\n            x1 = _this4$clcCoordinate2[0],\n            y1 = _this4$clcCoordinate2[1];\n\n        var _this4$clcCoordinate3 = _this4.clcCoordinate(link.node2.lng, link.node2.lat),\n            _this4$clcCoordinate4 = _slicedToArray(_this4$clcCoordinate3, 2),\n            x2 = _this4$clcCoordinate4[0],\n            y2 = _this4$clcCoordinate4[1];\n\n        var s = {\n          name: link.node1.name,\n          x: x1,\n          y: y1\n        };\n        var e = {\n          name: link.node2.name,\n          x: x2,\n          y: y2\n        };\n        var color = link.polyline.getStrokeColor();\n        var dis = ''; //边的长度\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _this4.state.S_EDGE[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var edge = _step.value;\n\n            if (link.node1.name === edge[1][0] && link.node2.name === edge[1][1] || link.node1.name === edge[1][1] && link.node2.name === edge[1][0]) {\n              dis = edge[0]; //距离赋值\n\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        console.log(color, link);\n        return React.createElement(Link, {\n          key: \"link-\" + s.name + \"-\" + e.name,\n          from: s.name,\n          to: e.name,\n          x1: s.x,\n          y1: s.y,\n          x2: e.x,\n          y2: e.y,\n          color: color,\n          distance: dis,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        });\n      });\n      return svg;\n    }\n  }, {\n    key: \"changeSpeed\",\n    value: function changeSpeed(event) {\n      var p = (event.clientX - this.getLeft(event.target)) / event.target.clientWidth;\n      console.log(p);\n      this.setState({\n        speed: p\n      });\n    }\n  }, {\n    key: \"play\",\n    value: function play(event) {\n      if (this.state.play === \"stop\") {\n        this.setState({\n          play: \"play\"\n        });\n        clearTimeout(window.timer);\n        this.go(); //go()包含了初始化以及animate\n      } else if (this.state.play === \"pause\") {\n        this.setState({\n          play: \"play\"\n        });\n        this.animate(); //继续执行\n      } else if (this.state.play === \"play\") {\n        this.setState({\n          play: \"pause\"\n        });\n        clearTimeout(window.timer); //暂停,取消计时器他就不再执行（但是所有状态都保存着<最重要是STEP_COUNT>，下次继续animate即可继续执行）\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearTimeout(window.timer);\n      actionStep.STEP_COUNT = 1;\n      this.setState({\n        play: \"stop\",\n        start: \"\",\n        end: \"\"\n      });\n      /* global layer */\n\n      layer.msg(\"结束\");\n    } //消息发布，用于组件间传递代码信息!\n\n  }, {\n    key: \"codeChangeHandler\",\n    value: function codeChangeHandler(code) {\n      eventProxy.trigger(window.showCode, code);\n    }\n  }, {\n    key: \"actionGetHandler\",\n    value: function actionGetHandler(actions) {\n      eventProxy.trigger(window.showAction, actions);\n    } //执行（包括数据传递给C++以及根据C++回传数据显示），会调用animate\n\n  }, {\n    key: \"go\",\n    value: function go() {\n      var _this5 = this;\n\n      if (!this.state.start || !this.state.end) {\n        this.setState({\n          play: \"stop\"\n        });\n        return this.stop();\n      }\n\n      ;\n      var that = this; //this对象在程序中随时会改变，而var that=this之后，that没改变之前仍然是指向当时的this，这样就不会出现找不到原来的对象。\n\n      var edgeIn = [];\n      var pointIn = [];\n      var globalIn = [];\n      _name = []; //存储点的名字\n\n      var placesName = \"\";\n      this.props.node.forEach(function (node) {\n        //提取每个点的经度、维度、编号并存储在pointIn中(C++程序需要输入的点信息)\n        _name.push(node.name);\n\n        placesName = placesName + node.name + \" \";\n        var lng = parseInt(node.lng);\n        var lat = parseInt(node.lat);\n        var index = '*' + (_name.length - 1) + '*';\n        pointIn.push([index, lng, lat]);\n      });\n      pointIn = JSON.stringify(pointIn);\n      var start_index = '*' + _name.findIndex(function (v) {\n        return v === _this5.state.start;\n      }) + '*'; //找到起点、终点的编号\n\n      var end_index = '*' + _name.findIndex(function (v) {\n        return v === _this5.state.end;\n      }) + '*';\n      globalIn.push([pointIn.length]); //globalIn代表C++程序输入的参数：点数、？\n\n      globalIn.push([-1000, 1000]);\n      globalIn.push([1000, -1000]);\n      globalIn = JSON.stringify(globalIn);\n      that.resetColor();\n      var S_NODE = new Map();\n      var S_EDGE = new Map();\n      var S_NODE_DIS = new Map();\n      var S_NODE_INFO = new Map();\n      this.setState({\n        S_NODE: S_NODE,\n        S_EDGE: S_EDGE,\n        S_NODE_DIS: S_NODE_DIS,\n        S_NODE_INFO: S_NODE_INFO\n      }); //向 setState() 中传入一个对象来对已有的 state 进行更新。\n\n      var unvisiableID = \"\"; //记录删除掉的边，用于重绘\n\n      this.props.link.forEach(function (link, index) {\n        //整理edgeIn(编号、编号、距离),作为C++程序传入参数\n        if (!link.polyline.isVisible()) {\n          unvisiableID = unvisiableID + String(index) + \" \";\n          return;\n        }\n\n        var n1 = '*' + _name.findIndex(function (v) {\n          return v === link.node1.name;\n        }) + '*';\n        var n2 = '*' + _name.findIndex(function (v) {\n          return v === link.node2.name;\n        }) + '*';\n        edgeIn.push([n1, n2, parseFloat(link.dis, 10)]);\n      });\n      edgeIn = JSON.stringify(edgeIn); //////////////////////////////////////////////////////\n\n      window.layer.load(1, {\n        shade: [0.4, '#fff']\n      });\n      $.ajax({\n        type: \"POST\",\n        url: \"http://localhost:3001/data\",\n        //url:\"/data\",\n        data: {\n          edgeIn: edgeIn,\n          pointIn: pointIn,\n          globalIn: globalIn,\n          sName: start_index,\n          eName: end_index,\n          algo: window.algo,\n          placesName: placesName,\n          unvisiableID: unvisiableID,\n          repaint: window.repaint\n        },\n        success: function success(json) {\n          if (window.repaint) //如果是重绘\n            window.repaint = null; //console.log(_name);\n          //console.log({start_index, end_index});\n          //console.log(json);\n          // //stepData包括code、steps  //stepData是C++计算传回的数据,根据stepData,前端做出相应动作\n\n          stepData = json; //steps的数据是各个动作的含义，比如：\tchangeNodeColor(2,RGB(255,0,0))\tAnimation\t8\n\n          layer.closeAll();\n          var actions = []; //先读一遍数据，记录每一帧对应的动作编号，便于快进、返回;   同时记录动作内容，用于组件通信\n\n          for (var i = 0; i < stepData.steps.length - 1; i++) {\n            //暂未搞懂为什么多了一条动作？？？\n            //得到该动作对应帧的编号\n            var stepTemp = stepData.steps[i].split('\\t')[3]; //将该动作编号纳入帧编号\n\n            if (stepTemp in actionStep) actionStep[stepTemp].push(i);else {\n              actionStep[stepTemp] = [];\n              actionStep[stepTemp].push(i);\n            }\n            actions.push(stepData.steps[i].split('\\t')[1]); //存储动作内容\n          }\n\n          that.actionGetHandler(actions); //动作内容传递给Graphtable组件           \n          // 开始动画\n\n          that.animate(); //不能用this，因为ajax中的this已经不在代表外面的组件了!!!\n        },\n        error: function error() {\n          layer.closeAll();\n          layer.msg(\"出错, 提交失败\");\n        }\n      }); //////////////////////////////////////////////////////\n      // that.animate();\n    } //执行动画\n    //注意：当Question、showHelp、showCode时，之所以return是为了结束当前函数，不再执行当前函数末尾的animate\n    //因为在else if中会使用layer，内部接着使用了setTimeout和animate继续下去\n\n  }, {\n    key: \"animate\",\n    value: function animate() {\n      var _this6 = this;\n\n      // if(this.state.play!==\"play\")return;\n      //setTimeout(code,millisec), code是要执行的代码，lillisec是遇到setTimer后要等待多少毫秒才执行code!\n      //返回数值id，整型，可用于 取消 setTimeout 设置的函数clearTimeout(id)。也就是这个setTimeout的唯一标示符\n      window.timer = setTimeout(function () {\n        var step = _this6.getStep(STEP_COUNT); //获取一帧的全部数据\n\n\n        layer.closeAll();\n        STEP_COUNT++;\n\n        if (step === null) {\n          _this6.stop();\n\n          return;\n        }\n\n        var links = _this6.props.link; //将要更新的元素\n\n        var S_NODE = _this6.state.S_NODE;\n        var S_EDGE = _this6.state.S_EDGE;\n        var S_NODE_DIS = _this6.state.S_NODE_DIS;\n        var S_NODE_INFO = _this6.state.S_NODE_INFO;\n\n        for (var i = 0; i < step.types.length; i++) {\n          if (step.types[i] === \"changeEdgeColor\") {\n            (function () {\n              var params = step.infos[i][1].split(\"(\")[1].split(\",\");\n              params.pop();\n              var color = step.infos[i][1].split(\"RGB\")[1];\n              color = _this6.chooseColor(color); //改变边的颜色\n\n              var name1 = _name[parseInt(params[0])];\n\n              var name2 = _name[parseInt(params[1])];\n\n              links.forEach(function (link) {\n                if (link.polyline.isVisible()) {\n                  if (link.node1.name === name1 && link.node2.name === name2 || link.node1.name === name2 && link.node2.name === name1) {\n                    link.polyline.setStrokeColor(color);\n                  }\n                }\n              }); //this.props.updateState(null, links);\n            })();\n          } else if (step.types[i] === \"changeNodeColor\") {\n            var idx = step.infos[i][1].split(\"(\")[1].split(\",\")[0];\n            idx = parseInt(idx);\n            var color = step.infos[i][1].split(\"RGB\")[1];\n            color = _this6.chooseColor(color);\n            var name = _name[idx]; //找到编号对应的点名\n\n            S_NODE.set(name, color); //S_NODE是键值对，改变name对应点的状态\n            //this.setState({S_NODE});\n          } else if (step.types[i] === \"changeEdgeLength\") {\n            //\"20\tchangeEdgeLength(0,1,1173)\tAnimation\t2\";\n            var params = step.infos[i][1].split('(')[1].split(')')[0].split(','); //获取点编号、边距离\n\n            var name1 = _name[parseInt(params[0])]; //起点编号\n\n\n            var name2 = _name[parseInt(params[1])];\n\n            var dis = parseFloat(params[2]);\n            S_EDGE.set(dis, [name1, name2]);\n          } else if (step.types[i] === \"changeNodeDist\") {\n            var params = step.infos[i][1].split('(')[1].split(')')[0].split(',');\n\n            var _idx = parseInt(params[0]); //点的编号\n\n\n            var distance = parseFloat(params[1]);\n            var _name2 = _name[_idx]; //点名\n\n            S_NODE_DIS.set(_name2, distance);\n          } else if (step.types[i] === \"showCode\") {\n            var that = _this6;\n            var param = step.infos[i][1].split('(')[1].split(')')[0];\n            var codeName = \"code\" + param + \".txt\";\n            $.ajax({\n              type: \"POST\",\n              url: \"http://localhost:3001/code\",\n              //url:\"/code\",\n              data: {\n                codeName: codeName\n              },\n              success: function success(code) {\n                that.codeChangeHandler(code); //不能用this，因为ajax中的this已经不在代表外面的组件了!!!???\n              },\n              error: function error() {\n                console.log('获取代码失败！');\n              }\n            });\n          } else if (step.types[i] === \"showHelp\") {\n            var msg = step.infos[i][1].split(\"(\")[1].split(\")\")[0];\n            layer.msg(msg, {\n              time: _this6.state.speed * 3000 + 70\n            });\n          } else if (step.types[i] === \"Question\" && window.question) {\n            var actionID = step.infos[i][0];\n            var queType = step.infos[i][1].split('(')[1].split(',')[0]; //问题类型\n\n            var que = step.infos[i][1].split('(')[1].split(',')[1]; //que对应问题的内容\n\n            if (que[0] === \"*\") //打个补丁，针对dijkstra提问为：*1*在本次循环后到起点的距离为？　的情况\n              {\n                que = que.replace(/\\*/g, \"\");\n                que = que.replace(que[0], _name[que[0]]);\n              }\n\n            var ans = step.infos[i][1].split('(')[1].split(',')[2]; //ans对应动作中给出的答案 \n\n            if (ans[0] === \"*\") {\n              //标准答案，返回的是 *2* 类型\n              ans = ans.replace(/\\*/g, \"\");\n              ans = _name[ans];\n              return _this6.ask(que, ans, queType, actionID);\n            } else //答案不只一个地点(默认10个和以内),数字转化为文字路径\n              {\n                if (Object.is(window.algo, \"dijkstra\")) //dj数字答案直接返回\n                  return _this6.ask(que, ans, queType, actionID);\n                var pathNum = parseInt(ans);\n                var path_num = [];\n                var ans_length = ans.length;\n\n                while (ans_length >= 1) {\n                  path_num.push(pathNum % 10);\n                  pathNum = parseInt(pathNum / 10); //js竟然不能整除!!!\n\n                  ans_length--;\n                }\n\n                var path_str = void 0;\n\n                for (var _i = path_num.length - 1; _i >= 0; _i--) {\n                  if (_i == path_num.length - 1) path_str = _name[path_num[_i]] + \"->\";else if (_i == 0) path_str = path_str + _name[path_num[_i]];else path_str = path_str + _name[path_num[_i]] + \"->\";\n                }\n\n                return _this6.ask(que, path_str, queType, actionID);\n              }\n          } else if (step.types[i] === \"showInequality\") {\n            var params = step.infos[i][1].split('(')[1].split(')')[0].split(',');\n\n            var _idx2 = parseInt(params[0]); //点的编号\n\n\n            var info = params[1];\n            var _name3 = _name[_idx2]; //点名\n\n            S_NODE_INFO.set(_name3, info);\n          } else if (step.types[i] === \"InequalityDisapper\") {\n            var params = step.infos[i][1].split('(')[1].split(')')[0].split(',');\n\n            var _idx3 = parseInt(params[0]); //点的编号\n\n\n            var _info = ''; //将信息（不等式）置空\n\n            var _name4 = _name[_idx3]; //点名\n\n            S_NODE_INFO.set(_name4, _info);\n          }\n        } //对一帧中的各元素统一进行刷新\n\n\n        _this6.props.updateState(null, links); //this.setState({S_NODE});\n        //this.setState({S_EDGE});\n        //this.setState({S_NODE_DIS});\n        //this.setState({S_NODE_INFO});\n\n\n        _this6.setState({\n          S_NODE: S_NODE,\n          S_EDGE: S_EDGE,\n          S_NODE_DIS: S_NODE_DIS,\n          S_NODE_INFO: S_NODE_INFO\n        });\n\n        _this6.animate(); //重复执行\n\n      }, this.state.speed * 3000 + 70);\n    } //学长原来是获取每一个动作信息－>此处改为获取每一个步骤(帧)的信息\n\n  }, {\n    key: \"getStep\",\n    value: function getStep(nStep) {\n      console.log(\"get step:\" + nStep); //读取一帧的数据\n\n      var types = new Array(); //创建数组，用于保存动作信息\n\n      var infos = new Array();\n\n      if (nStep in actionStep) {\n        for (var i = 0; i < actionStep[nStep].length; i++) {\n          var info = stepData.steps[actionStep[nStep][i]].split('\\t'); //第ACTION_COUNT条动作信息(作为数组保存在info)                  \n\n          var type = info[1].split('(')[0]; //info[1]代表动作的解释：changeNodeColor(4,RGB(91,155,213))；  则type对应changeNodeColor\n\n          types.push(type);\n          infos.push(info);\n        }\n\n        return {\n          types: types,\n          infos: infos\n        }; //返回对象，对象的属性是键值对\n      }\n\n      return null;\n    }\n  }, {\n    key: \"chooseColor\",\n    value: function chooseColor(color) {\n      switch (color) {\n        case \"(10,10,10))\":\n          return this.INITIAL_LINK_COLOR;\n        //初始化边（接近黑色）\n\n        case \"(91,155,213))\":\n          return this.INITIAL_NODE_COLOR;\n        //初始化点（接近蓝色)\n\n        case \"(255,0,0))\":\n          return this.SELECTED_LINK_COLOR;\n        //选中点、边（红色）\n\n        default:\n          return \"#000000\";\n      }\n    }\n  }, {\n    key: \"checkLink\",\n    value: function checkLink(link, name1, name2) {\n      var node1 = link.node1;\n      var node2 = link.node2;\n\n      if (node1.name === name1 && node2.name === name2 || node1.name === name2 && node2.name === name1) {\n        return true;\n      }\n\n      return false;\n    } //重置link颜色\n\n  }, {\n    key: \"resetColor\",\n    value: function resetColor() {\n      var _this7 = this;\n\n      var links = this.props.link;\n      links.forEach(function (link) {\n        if (link.polyline.isVisible()) link.polyline.setStrokeColor(_this7.DEFAULT_LINK_COLOR);\n      });\n      this.props.updateState(null, links);\n    }\n    /*获取元素的横坐标*/\n\n  }, {\n    key: \"getLeft\",\n    value: function getLeft(e) {\n      var offset = e.offsetLeft;\n\n      if (e.offsetParent != null) {\n        offset += this.getLeft(e.offsetParent);\n      }\n\n      return offset;\n    } //设置起点终点\n\n  }, {\n    key: \"setSE\",\n    value: function setSE(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var that = this;\n      var name = event.target.attributes.id.value.split(\"_\").pop();\n      /*\n      let menu = new nw.Menu();\n      menu.append(new nw.MenuItem({\n      \tlabel: '设为起点',\n      \tclick: function(){\n                    that.setState({start: name});\n      \t}\n      }));\n      menu.append(new nw.MenuItem({\n      \tlabel: '设为终点',\n      \tclick: function(){\n                    that.setState({end: name});\n      \t}\n      }));\n      menu.popup(event.clientX, event.clientY);*/\n\n      var menu = new MyMenu(\"MyMenu_Node_SVG\");\n      menu.append([{\n        label: '设为起点',\n        click: function click() {\n          that.setState({\n            start: name\n          });\n        }\n      }, {\n        label: '设为终点',\n        click: function click() {\n          that.setState({\n            end: name\n          });\n        }\n      }]);\n      menu.popup(event.clientX, event.clientY);\n      return false;\n    } //提问\n\n  }, {\n    key: \"ask\",\n    value: function ask(que, msg, type, actionID) {\n      //msg是标准答案(转换后的)\n      clearTimeout(window.timer);\n      var that = this;\n      window.layer.prompt({\n        title: que\n      }, function (text, index) {\n        layer.closeAll();\n        var visitID = -1; //答对答错都要保存结果(不是重绘的时候才保存！！！)\n\n        if (!window.repaint) {\n          $.ajax({\n            //需要先从动作表获得最大visitID(因为可能取消了问题而不保存在que表中)\n            type: \"GET\",\n            url: 'http://localhost:3001/getVisitID',\n            //url:\"/collect\",\n            data: {},\n            success: function success(json) {\n              visitID = parseInt(json.visitID);\n              $.ajax({\n                //ajax是异步的，为了保持同步，保存题目需要写在查询visitID的回调函数中\n                type: \"POST\",\n                url: 'http://localhost:3001/collectQue',\n                //url:\"/collect\",\n                data: {\n                  que: que,\n                  ans: text,\n                  msg: msg,\n                  type: type,\n                  visitID: visitID,\n                  actionID: actionID\n                },\n                success: function success(json) {},\n                error: function error() {}\n              });\n            },\n            error: function error() {}\n          });\n        }\n\n        if (text != msg) {\n          window.layer.msg('正确答案：' + msg, {\n            time: 1000\n          });\n          setTimeout(function () {\n            that.animate();\n          }, 1100);\n        } else {\n          window.layer.msg('答对了！', {\n            time: 1000\n          });\n          that.animate();\n        }\n      });\n    } //**************************************************** by cdz\n    //执行动作：根据STEP_COUNT执行！！！\n    //注意：当Question、showHelp、showCode时，之所以return是为了结束当前函数，不再执行当前函数末尾的animate\n    //因为在else if中会使用layer，内部接着使用了setTimeout和animate继续下去\n    //倒退:为了减少不必要的理解错误，只能倒退到点和边初始化完成以后\n\n  }, {\n    key: \"animate_back\",\n    value: function animate_back() {\n      var _this8 = this;\n\n      //不管处于什么状态，都使其暂停\n      this.setState({\n        play: \"pause\"\n      });\n      clearTimeout(window.timer);\n      layer.closeAll();\n      STEP_COUNT--;\n      var back_step = this.getStep(STEP_COUNT); //获取上一帧的信息\n\n      if (back_step === null) {\n        this.stop();\n        return;\n      }\n\n      var links = this.props.link; //将要更新的元素\n\n      var S_NODE = this.state.S_NODE;\n      var S_EDGE = this.state.S_EDGE;\n      var S_NODE_DIS = this.state.S_NODE_DIS;\n      var S_NODE_INFO = this.state.S_NODE_INFO;\n\n      for (var i = 0; i < back_step.types.length; i++) {\n        //扫描一帧的内容\n        console.log(back_step.infos[i]);\n\n        if (back_step.types[i] === \"changeEdgeColor\") {\n          (function () {\n            var params = back_step.infos[i][1].split(\"(\")[1].split(\",\");\n            params.pop(); //let color =back_step.infos[i][1].split(\"RGB\")[1];\n\n            var color = _this8.INITIAL_LINK_COLOR; //状态返回，即后退\n            //改变边的颜色\n\n            var name1 = _name[parseInt(params[0])];\n\n            var name2 = _name[parseInt(params[1])];\n\n            links.forEach(function (link) {\n              if (link.polyline.isVisible()) {\n                if (link.node1.name === name1 && link.node2.name === name2 || link.node1.name === name2 && link.node2.name === name1) {\n                  link.polyline.setStrokeColor(color);\n                }\n              }\n            }); //this.props.updateState(null, links);\n          })();\n        } else if (back_step.types[i] === \"changeNodeColor\") {\n          var idx = back_step.infos[i][1].split(\"(\")[1].split(\",\")[0];\n          idx = parseInt(idx); //let color = back_step.infos[i][1].split(\"RGB\")[1];\n\n          var color = this.INITIAL_NODE_COLOR;\n          var name = _name[idx]; //找到编号对应的点名\n\n          S_NODE.set(name, color); //S_NODE是键值对，改变name对应点的状态\n          //this.setState({S_NODE});\n        } else if (back_step.types[i] === \"changeEdgeLength\") {\n          //\"20\tchangeEdgeLength(0,1,1173)\tAnimation\t2\";\n          var params = back_step.infos[i][1].split('(')[1].split(')')[0].split(','); //获取点编号、边距离\n\n          var name1 = _name[parseInt(params[0])]; //起点编号\n\n\n          var name2 = _name[parseInt(params[1])];\n\n          var dis = parseFloat(params[2]);\n          S_EDGE.set(dis, [name1, name2]);\n        } else if (back_step.types[i] === \"changeNodeDist\") {\n          var params = back_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n\n          var _idx4 = parseInt(params[0]); //点的编号\n\n\n          var distance = parseFloat(params[1]);\n          var _name5 = _name[_idx4]; //点名\n\n          S_NODE_DIS.set(_name5, distance);\n        } else if (back_step.types[i] === \"showCode\") {\n          var that = this;\n          var param = back_step.infos[i][1].split('(')[1].split(')')[0];\n          var codeName = \"code\" + param + \".txt\";\n          $.ajax({\n            type: \"POST\",\n            url: \"http://localhost:3001/code\",\n            //url:\"/code\",\n            data: {\n              codeName: codeName\n            },\n            success: function success(code) {\n              that.codeChangeHandler(code); //不能用this，因为ajax中的this已经不在代表外面的组件了!!!???\n            },\n            error: function error() {\n              console.log('获取代码失败！');\n            }\n          });\n        } else if (back_step.types[i] === \"showHelp\") {\n          var msg = back_step.infos[i][1].split(\"(\")[1].split(\")\")[0];\n          layer.msg(msg, {\n            time: this.state.speed * 3000000 + 70\n          }); //无限停留\n        } else if (back_step.types[i] === \"Question\" && window.question) {\n          var que = back_step.infos[i][2];\n          var ans = back_step.infos[i][3];\n\n          if (ans[0] === \"*\") {\n            ans = ans.replace(/\\*/g, \"\");\n            ans = _name[ans];\n          }\n\n          return this.ask(que, ans);\n        } else if (back_step.types[i] === \"showInequality\") {\n          var params = back_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n\n          var _idx5 = parseInt(params[0]); //点的编号\n\n\n          var info = params[1];\n          var _name6 = _name[_idx5]; //点名\n\n          S_NODE_INFO.set(_name6, info);\n        } else if (back_step.types[i] === \"InequalityDisapper\") {\n          var params = back_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n\n          var _idx6 = parseInt(params[0]); //点的编号\n\n\n          var _info2 = ''; //将信息（不等式）置空\n\n          var _name7 = _name[_idx6]; //点名\n\n          S_NODE_INFO.set(_name7, _info2);\n        }\n      } //对一帧中的各元素统一进行刷新\n\n\n      this.props.updateState(null, links); //this.setState({S_NODE});\n      //this.setState({S_EDGE});\n      //this.setState({S_NODE_DIS});\n      //this.setState({S_NODE_INFO});\n\n      this.setState({\n        S_NODE: S_NODE,\n        S_EDGE: S_EDGE,\n        S_NODE_DIS: S_NODE_DIS,\n        S_NODE_INFO: S_NODE_INFO\n      });\n    } //前进\n\n  }, {\n    key: \"animate_forward\",\n    value: function animate_forward() {\n      var _this9 = this;\n\n      //不管处于什么状态，都使其暂停\n      this.setState({\n        play: \"pause\"\n      });\n      clearTimeout(window.timer);\n      layer.closeAll();\n      STEP_COUNT++;\n      var forward_step = this.getStep(STEP_COUNT);\n\n      if (forward_step === null) {\n        this.stop();\n        return;\n      }\n\n      var links = this.props.link; //将要更新的元素\n\n      var S_NODE = this.state.S_NODE;\n      var S_EDGE = this.state.S_EDGE;\n      var S_NODE_DIS = this.state.S_NODE_DIS;\n      var S_NODE_INFO = this.state.S_NODE_INFO;\n\n      for (var i = 0; i < forward_step.types.length; i++) {\n        if (forward_step.types[i] === \"changeEdgeColor\") {\n          (function () {\n            var params = forward_step.infos[i][1].split(\"(\")[1].split(\",\");\n            params.pop();\n            var color = forward_step.infos[i][1].split(\"RGB\")[1];\n            color = _this9.chooseColor(color); //改变边的颜色\n\n            var name1 = _name[parseInt(params[0])];\n\n            var name2 = _name[parseInt(params[1])];\n\n            links.forEach(function (link) {\n              if (link.polyline.isVisible()) {\n                if (link.node1.name === name1 && link.node2.name === name2 || link.node1.name === name2 && link.node2.name === name1) {\n                  link.polyline.setStrokeColor(color);\n                }\n              }\n            }); //this.props.updateState(null, links);\n          })();\n        } else if (forward_step.types[i] === \"changeNodeColor\") {\n          var idx = forward_step.infos[i][1].split(\"(\")[1].split(\",\")[0];\n          idx = parseInt(idx);\n          var color = forward_step.infos[i][1].split(\"RGB\")[1];\n          color = this.chooseColor(color);\n          var name = _name[idx]; //找到编号对应的点名\n\n          S_NODE.set(name, color); //S_NODE是键值对，改变name对应点的状态\n          //this.setState({S_NODE});\n        } else if (forward_step.types[i] === \"changeEdgeLength\") {\n          //\"20\tchangeEdgeLength(0,1,1173)\tAnimation\t2\";\n          var params = forward_step.infos[i][1].split('(')[1].split(')')[0].split(','); //获取点编号、边距离\n\n          var name1 = _name[parseInt(params[0])]; //起点编号\n\n\n          var name2 = _name[parseInt(params[1])];\n\n          var dis = parseFloat(params[2]);\n          S_EDGE.set(dis, [name1, name2]);\n        } else if (forward_step.types[i] === \"changeNodeDist\") {\n          var params = forward_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n\n          var _idx7 = parseInt(params[0]); //点的编号\n\n\n          var distance = parseFloat(params[1]);\n          var _name8 = _name[_idx7]; //点名\n\n          S_NODE_DIS.set(_name8, distance);\n        } else if (forward_step.types[i] === \"showCode\") {\n          var that = this;\n          var param = forward_step.infos[i][1].split('(')[1].split(')')[0];\n          var codeName = \"code\" + param + \".txt\";\n          $.ajax({\n            type: \"POST\",\n            url: \"http://localhost:3001/code\",\n            //url:\"/code\",\n            data: {\n              codeName: codeName\n            },\n            success: function success(code) {\n              that.codeChangeHandler(code); //不能用this，因为ajax中的this已经不在代表外面的组件了!!!???\n            },\n            error: function error() {\n              console.log('获取代码失败！');\n            }\n          });\n        } else if (forward_step.types[i] === \"showHelp\") {\n          var msg = forward_step.infos[i][1].split(\"(\")[1].split(\")\")[0];\n          layer.msg(msg, {\n            time: this.state.speed * 300000 + 70\n          }); //无限停留\n        } else if (forward_step.types[i] === \"Question\" && window.question) {\n          var que = forward_step.infos[i][2];\n          var ans = forward_step.infos[i][3];\n\n          if (ans[0] === \"*\") {\n            ans = ans.replace(/\\*/g, \"\");\n            ans = _name[ans];\n          }\n\n          return this.ask(que, ans);\n        } else if (forward_step.types[i] === \"showInequality\") {\n          var params = forward_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n\n          var _idx8 = parseInt(params[0]); //点的编号\n\n\n          var info = params[1];\n          var _name9 = _name[_idx8]; //点名\n\n          S_NODE_INFO.set(_name9, info);\n        } else if (forward_step.types[i] === \"InequalityDisapper\") {\n          var params = forward_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n\n          var _idx9 = parseInt(params[0]); //点的编号\n\n\n          var _info3 = ''; //将信息（不等式）置空\n\n          var _name10 = _name[_idx9]; //点名\n\n          S_NODE_INFO.set(_name10, _info3);\n        }\n      } //对一帧中的各元素统一进行刷新\n\n\n      this.props.updateState(null, links); //this.setState({S_NODE});\n      //this.setState({S_EDGE});\n      //this.setState({S_NODE_DIS});\n      //this.setState({S_NODE_INFO});\n\n      this.setState({\n        S_NODE: S_NODE,\n        S_EDGE: S_EDGE,\n        S_NODE_DIS: S_NODE_DIS,\n        S_NODE_INFO: S_NODE_INFO\n      });\n    }\n  }]);\n\n  return GraphSVG;\n}(React.Component);\n\nvar Node =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Node, _React$Component2);\n\n  function Node(props) {\n    var _this10;\n\n    _classCallCheck(this, Node);\n\n    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(Node).call(this, props));\n    _this10.SELECT_COLOR = \"#300\";\n    _this10.DEFAULT_COLOR = \"#3C9\";\n    return _this10;\n  } //<g>元素通常用来对相关图形元素进行分组\n  //onContextMenu：对应右击鼠标的响应事件\n\n\n  _createClass(Node, [{\n    key: \"render\",\n    value: function render() {\n      var _React$createElement, _React$createElement2;\n\n      return React.createElement(\"g\", {\n        id: \"node_\" + this.props.name,\n        onContextMenu: this.props.setSE,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 928\n        },\n        __self: this\n      }, React.createElement(\"circle\", {\n        id: \"node_circle_\" + this.props.name,\n        cx: this.props.x,\n        cy: this.props.y,\n        r: this.props.r || 20,\n        fill: this.props.color || this.DEFAULT_COLOR,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 929\n        },\n        __self: this\n      }), React.createElement(\"text\", {\n        id: \"node_text_\" + this.props.name,\n        x: this.props.x,\n        y: this.props.y,\n        fill: \"black\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        style: {\n          fontSize: \"13px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 930\n        },\n        __self: this\n      }, this.props.hide || this.props.name), React.createElement(\"text\", (_React$createElement = {\n        id: \"node_value\" + this.props.name,\n        x: this.props.x,\n        y: this.props.y + 10,\n        fill: \"black\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        fontSize: \"13px\"\n      }, _defineProperty(_React$createElement, \"fill\", \"blue\"), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 931\n      }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement), this.props.distance), React.createElement(\"text\", (_React$createElement2 = {\n        id: \"node_value\" + this.props.name,\n        x: this.props.x + 40,\n        y: this.props.y - 5,\n        fill: \"black\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        fontSize: \"13px\"\n      }, _defineProperty(_React$createElement2, \"fill\", \"black\"), _defineProperty(_React$createElement2, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 932\n      }), _defineProperty(_React$createElement2, \"__self\", this), _React$createElement2), this.props.info));\n    }\n  }, {\n    key: \"hover\",\n    value: function hover(event) {\n      console.log(event.target.attributes.fill);\n      console.log(event.target.attributes);\n      var attributes = event.target.attributes;\n    }\n  }]);\n\n  return Node;\n}(React.Component);\n\nvar Link =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(Link, _React$Component3);\n\n  function Link(props) {\n    var _this11;\n\n    _classCallCheck(this, Link);\n\n    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(Link).call(this, props));\n    _this11.SELECT_COLOR = \"#900\";\n    _this11.DEFAULT_COLOR = _this11.props.color;\n    return _this11;\n  }\n\n  _createClass(Link, [{\n    key: \"render\",\n    value: function render() {\n      this.DEFAULT_COLOR = this.props.color;\n      return React.createElement(\"g\", {\n        id: \"link_\" + this.props.from + \"_\" + this.props.to,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 953\n        },\n        __self: this\n      }, React.createElement(\"line\", {\n        x1: this.props.x1,\n        y1: this.props.y1,\n        x2: this.props.x2,\n        y2: this.props.y2,\n        stroke: this.props.color,\n        strokeWidth: \"5\",\n        style: {\n          cursor: \"pointer\"\n        },\n        onMouseEnter: this.hover.bind(this),\n        onMouseLeave: this.hover.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 954\n        },\n        __self: this\n      }), React.createElement(\"text\", {\n        x: (this.props.x1 + this.props.x2) / 2,\n        y: (this.props.y1 + this.props.y2) / 2,\n        style: {\n          fontSize: \"15px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 955\n        },\n        __self: this\n      }, this.props.distance));\n    }\n  }, {\n    key: \"hover\",\n    value: function hover(event) {\n      var attributes = event.target.attributes;\n      attributes.stroke.value === this.SELECT_COLOR ? attributes.stroke.value = this.DEFAULT_COLOR : attributes.stroke.value = this.SELECT_COLOR;\n    }\n  }]);\n\n  return Link;\n}(React.Component);\n\nexport default GraphSVG;","map":{"version":3,"sources":["/home/cdz/Code/FrontEnd/algorithm-visualization-for-Mr-Huang/frontEnd/src/app/component/GraphSVG.js"],"names":["Graph","MyMenu","eventProxy","assertFunctionParent","require","React","$","window","jQuery","stepData","_name","actionStep","STEP_COUNT","question","GraphSVG","props","state","DEFAULT_LINK_COLOR","INITIAL_LINK_COLOR","INITIAL_NODE_COLOR","SELECTED_LINK_COLOR","SELECTED_NODE_COLOR","speed","play","start","end","S_NODE","Map","S_EDGE","S_NODE_DIS","S_NODE_INFO","clcMaxMin","nodes","renderNode","links","renderLink","controlstate","width","height","backgroundColor","e","preventDefault","checkChange","bind","changeSpeed","animate_back","animate_forward","stop","reSet","resetColor","target","checked","console","log","setState","max_lng","Infinity","min_lng","max_lat","min_lat","mid_lng","mid_lat","node","forEach","lat","lng","length","w","refs","graph","clientWidth","h","clientHeight","margin","svg","map","clcCoordinate","x","y","name","setSE","color","distance","info","has","get","data","link","polyline","isVisible","node1","x1","y1","node2","x2","y2","s","getStrokeColor","dis","edge","event","p","clientX","getLeft","clearTimeout","timer","go","animate","layer","msg","code","trigger","showCode","actions","showAction","that","edgeIn","pointIn","globalIn","placesName","push","parseInt","index","JSON","stringify","start_index","findIndex","v","end_index","unvisiableID","String","n1","n2","parseFloat","load","shade","ajax","type","url","sName","eName","algo","repaint","success","json","closeAll","i","steps","stepTemp","split","actionGetHandler","error","setTimeout","step","getStep","types","params","infos","pop","chooseColor","name1","name2","setStrokeColor","idx","set","param","codeName","codeChangeHandler","time","actionID","queType","que","replace","ans","ask","Object","is","pathNum","path_num","ans_length","path_str","updateState","nStep","Array","offset","offsetLeft","offsetParent","stopPropagation","attributes","id","value","menu","append","label","click","popup","clientY","prompt","title","text","visitID","back_step","forward_step","Component","Node","SELECT_COLOR","DEFAULT_COLOR","r","fontSize","hide","fill","Link","from","to","cursor","hover","stroke"],"mappings":"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","sourcesContent":["//import d3 from './d3.v4.min.js';\n//window.d3 = d3;\n//import $ from 'jquery';  //引入jquery\nimport Graph from \"./Graph.js\";\nimport MyMenu from \"./MyMenu.js\";\nimport eventProxy from \"../eventProxy.js\"\nimport { assertFunctionParent } from \"babel-types\";\nrequire('../../assets/play.png');\nrequire('../../assets/pause.png');\nlet React = require('react');\n\n\n//readme: 学长的代码中node的改变是通过state.S_NODE实现，edge(颜色)的改变是通过this.props.link实现!!!!!\n//经补充修改后，边上路径长度的改变通过state.S_EDGE实现\n   \n//import stepData from \"./testData.js\";\nlet $=window.jQuery;\nlet stepData = null;\nlet _name = [];     //存储点名\n//let STEP_COUNT = 0;　　　//学长以STEP_COUNT记录每一个动作的编号（是动作不是帧！！）->改为每一帧的编号\nlet actionStep={};        //用于存储步骤动作信息,eg:   {3:[3,4,5,6]}表示第三帧包含动作3、4、５、６\nlet STEP_COUNT=1;         //全局记录当前演示的帧数\nwindow.question = true;\n\nclass GraphSVG extends React.Component{\n    //其属性来自Panel...this.pros的传递,包括updtaState、node、link\n    constructor(props){\n        super(props);\n        this.state = {};\n\n        //注意：关于点、边的颜色\n        //ＤＦＳ后台传递的颜色：初始化边表示（１０，１０，１０），初始点表示(91,155,2１3),选中点边表示（255,0,0）\n        //DJ后台传递颜色:初始化边（１０，１０，１０），初始化点（９１，１５５，２１３），\n\n        this.DEFAULT_LINK_COLOR = \"#3a6bdb\";  //默认是(浅蓝色)\n        this.INITIAL_LINK_COLOR = \"#0a0a0a\";   //初始化后边的颜色\n        this.INITIAL_NODE_COLOR = \"#5B9BD5\";  //初始化后点的颜色\n        this.SELECTED_LINK_COLOR = \"#ff0000\";   //选中的边，红色\n        this.SELECTED_NODE_COLOR = \"#ff0000\";   //选中的点     \n       \n        //this.path = null;\n\n        this.state.speed = 0.5;\n        this.state.play = \"stop\";\n        this.state.start = \"\";\n        this.state.end = \"\";\n        this.state.S_NODE = new Map(); //更新点的颜色;　　　　　　　　　Map是一组键值对的结构，具有极快的查找速度(误以为是Map.js导出的Map类)\n        this.state.S_EDGE = new Map();  //更新边的距离\n        this.state.question= true;\n        this.state.S_NODE_DIS=new Map(); //更新点到起点的距离\n        this.state.S_NODE_INFO=new Map(); //更新点旁边的其他信息，如显示不等式\n    }\n\n    render(){\n        this.clcMaxMin();\n        let nodes = this.renderNode();\n        let links = this.renderLink();\n\n        let controlstate = this.state.play===\"play\"?\"pauseState\":\"playState\";\n\n        return (\n            <div id=\"graphWrap\">\n                <div id=\"main\">\n                    <div style={{width:\"100%\", height:\"100%\", backgroundColor:\"#FFF\"}}>\n                        <svg ref=\"graph\" width=\"100%\" height=\"100%\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" onContextMenu={(e)=>{e.preventDefault();}}>\n                            {links}\n                            {nodes}\n                        </svg>\n                    </div>\n                </div>\n                <div id=\"tool\">\n                    <div id=\"question\"> 提问 <input id=\"question_checkbox\" type=\"checkbox\" checked={this.state.question} onChange={this.checkChange.bind(this)}/> </div>\n                    <div id=\"speed\" title=\"速度\" onClick={this.changeSpeed.bind(this)}>\n                        <div id=\"speedValue\" style={{width: this.state.speed*100+\"%\"}}></div>\n                    </div>\n                    <div id=\"prev\" title=\"上一步\" onClick={this.animate_back.bind(this)}></div>\n                    <div id=\"start\" title=\"开始/暂停\" className={controlstate} onClick={this.play.bind(this)}></div>\n                    <div id=\"next\" title=\"下一步\" onClick={this.animate_forward.bind(this)}></div>\n                    <div id=\"end\" title=\"结束\" onClick={this.stop.bind(this)}></div>\n                    <div id=\"reset\" title=\"复位\" onClick={this.reSet.bind(this)}></div>\n                </div>\n            </div>\n        );\n    }\n\n    //右上角全部复位！\n    reSet()\n    {    //复位！\n        stepData = null;\n        _name = [];     //存储点名\n        actionStep={};        //用于存储步骤动作信息,eg:   {3:[3,4,5,6]}表示第三帧包含动作3、4、５、６\n        STEP_COUNT=1;         //全局记录当前演示的帧数\n        window.question = true;\n\n        this.resetColor();\n\n        this.state.speed = 0.5;\n        this.state.play = \"stop\";\n        this.state.start = \"\";\n        this.state.end = \"\";\n        this.state.S_NODE = new Map(); //更新点的颜色;　　　　　　　　　Map是一组键值对的结构，具有极快的查找速度(误以为是Map.js导出的Map类)\n        this.state.S_EDGE = new Map();  //更新边的距离\n        this.state.question= true;\n        this.state.S_NODE_DIS=new Map(); //更新点到起点的距离\n        this.state.S_NODE_INFO=new Map(); //更新点旁边的其他信息，如显示不等式\n    }\n    //是否提问状态改变\n    checkChange(e){\n        window.question = e.target.checked;\n        console.log(window.question);\n        this.setState({question: !this.state.question});\n    }\n\n    clcMaxMin(){\n        let max_lng = -Infinity, min_lng = Infinity;\n        let max_lat = -Infinity, min_lat = Infinity;\n\n        this.mid_lng = 0;\n        this.mid_lat = 0;\n\n        this.props.node.forEach(node=>{\n            if(node.lat>max_lat)max_lat = node.lat;\n            if(node.lat<min_lat)min_lat = node.lat;\n\n            if(node.lng>max_lng)max_lng = node.lng;\n            if(node.lng<min_lng)min_lng = node.lng;\n            \n            this.mid_lng += node.lng;\n            this.mid_lat += node.lat;\n        });\n\n        this.max_lng = max_lng;\n        this.min_lng = min_lng;\n\n        this.max_lat = max_lat;\n        this.min_lat = min_lat;\n\n        this.mid_lng /= this.props.node.length;\n        this.mid_lat /= this.props.node.length;\n    }\n\n    clcCoordinate(lng, lat){\n        let w = this.refs.graph.clientWidth;\n        let h = this.refs.graph.clientHeight;\n\n        let margin = 50;\n\n        // w = (w-margin - margin)/(this.max_lat-this.min_lat + 0.001)*(lat-this.min_lat) + margin;\n        // h = h - ( (h-margin - margin)/(this.max_lng-this.min_lng + 0.001)*(lng-this.min_lng) + margin ) ;\n\n        w = (w-margin - margin)/(this.max_lng-this.min_lng + 0.001)*(lng-this.min_lng) + margin;\n        h = h - ( (h-margin - margin)/(this.max_lat-this.min_lat + 0.001)*(lat-this.min_lat) + margin ) ;\n\n        return [w, h];\n    }\n\n    renderNode(){\n        let nodes = this.props.node;\n        let svg = nodes.map(node=>{\n            let [x, y] = this.clcCoordinate(node.lng, node.lat);\n            let name = node.name;\n            let setSE = this.setSE.bind(this);\n            let color = null;\n            let distance='';\n            let info='';  //显示不等式\n\n            if(this.state.start===node.name){\n                color = \"#CCFFFF\";\n            }\n             if(this.state.end===node.name){\n                color = \"#CC6699\";\n            }\n            if(this.state.S_NODE.has(node.name)){\n                color = this.state.S_NODE.get(node.name);\n            }\n            if(this.state.S_NODE_DIS.has(node.name)){\n                distance=this.state.S_NODE_DIS.get(node.name);\n            }\n            if(this.state.S_NODE_INFO.has(node.name)){\n                info=this.state.S_NODE_INFO.get(node.name);\n            }\n            let data = {name, x, y, setSE, color,distance,info};   //把data作为属性传递给Node\n            return ( <Node key={\"node\"+node.name} {...data}/> );   //Node类在此脚本末尾！\n            //react利用key来识别组件，它是一种身份标识标识,与props中的属性不同！！！\n        });\n        return svg;\n    }\n\n    renderLink(){\n        let links = this.props.link;\n        let svg = links.map(link=>{\n            if(!link.polyline.isVisible())return;\n            let [x1, y1] = this.clcCoordinate(link.node1.lng, link.node1.lat);\n            let [x2, y2] = this.clcCoordinate(link.node2.lng, link.node2.lat);\n            let s = {\n                name: link.node1.name,\n                x: x1,\n                y: y1,\n            };\n            let e = {\n                name: link.node2.name,\n                x: x2,\n                y: y2,\n            };\n            let color = link.polyline.getStrokeColor();\n            let dis='';  //边的长度\n            for(var edge of this.state.S_EDGE){\n                if((link.node1.name===edge[1][0]&&link.node2.name===edge[1][1])||(link.node1.name===edge[1][1]&&link.node2.name===edge[1][0])){\n                    dis=edge[0]; //距离赋值\n                    break;\n                }\n            }\n           \n            console.log(color, link);\n            return ( <Link key={\"link-\"+s.name+\"-\"+e.name} from={s.name} to={e.name} x1={s.x} y1={s.y} x2={e.x} y2={e.y} color={color} distance={dis}/> );\n        });\n        return svg;\n    }\n\n    changeSpeed(event){\n        let p = (event.clientX - this.getLeft(event.target)) / event.target.clientWidth;\n        console.log(p);\n        this.setState({speed: p});\n    }\n\n    play(event){\n        if(this.state.play===\"stop\"){\n            this.setState({play: \"play\"});\n            clearTimeout(window.timer);\n            this.go();           //go()包含了初始化以及animate\n            \n        }else if(this.state.play===\"pause\"){\n            this.setState({play: \"play\"});\n            this.animate();     //继续执行\n\n        }else if(this.state.play===\"play\"){\n\n            this.setState({play: \"pause\"});\n            clearTimeout(window.timer);  //暂停,取消计时器他就不再执行（但是所有状态都保存着<最重要是STEP_COUNT>，下次继续animate即可继续执行）\n\n        }\n    }\n\n    stop(){\n        clearTimeout(window.timer);\n        actionStep.STEP_COUNT = 1;\n        this.setState({play: \"stop\", start: \"\", end: \"\"});\n         /* global layer */\n        layer.msg(\"结束\");\n    }\n\n    //消息发布，用于组件间传递代码信息!\n    codeChangeHandler(code){\n        eventProxy.trigger(window.showCode,code);\n    }\n    actionGetHandler(actions){\n        eventProxy.trigger(window.showAction,actions);\n    }\n\n    //执行（包括数据传递给C++以及根据C++回传数据显示），会调用animate\n    go(){\n        if(!this.state.start || !this.state.end){\n            this.setState({play:\"stop\"});\n            return this.stop();\n        };\n\n        var that = this;   //this对象在程序中随时会改变，而var that=this之后，that没改变之前仍然是指向当时的this，这样就不会出现找不到原来的对象。\n\n        var edgeIn = [];\n        var pointIn = [];\n        var globalIn = [];\n\n\n        _name = [];       //存储点的名字\n        var placesName=\"\";\n\n        this.props.node.forEach(node=>{  //提取每个点的经度、维度、编号并存储在pointIn中(C++程序需要输入的点信息)\n            _name.push(node.name);\n            placesName=placesName+node.name+\" \";\n            let lng = parseInt(node.lng);\n            let lat = parseInt(node.lat);\n            let index = '*'+(_name.length-1)+'*'\n            pointIn.push([index, lng, lat]);\n        });\n        pointIn = JSON.stringify(pointIn);\n\n        var start_index = '*'+(_name.findIndex(v=>v===this.state.start))+'*';  //找到起点、终点的编号\n        var end_index = '*'+(_name.findIndex(v=>v===this.state.end))+'*';\n\n\n        globalIn.push([pointIn.length]);     //globalIn代表C++程序输入的参数：点数、？\n        globalIn.push([-1000, 1000]);\n        globalIn.push([1000, -1000]);\n        globalIn = JSON.stringify(globalIn);\n\n        \n        that.resetColor();\n        let S_NODE = new Map();\n        let S_EDGE = new Map();\n        let S_NODE_DIS=new Map();\n        let S_NODE_INFO=new Map();\n        this.setState({S_NODE, S_EDGE,S_NODE_DIS,S_NODE_INFO});  //向 setState() 中传入一个对象来对已有的 state 进行更新。\n\n        var unvisiableID=\"\";                           //记录删除掉的边，用于重绘\n        this.props.link.forEach((link,index)=>{        //整理edgeIn(编号、编号、距离),作为C++程序传入参数\n            if(!link.polyline.isVisible()){\n                unvisiableID=unvisiableID+String(index)+\" \";           \n                return;\n            }\n            let n1 = '*'+_name.findIndex(v=>v===link.node1.name)+'*';\n            let n2 = '*'+_name.findIndex(v=>v===link.node2.name)+'*';\n            edgeIn.push([n1, n2, parseFloat(link.dis, 10)]);\n        });\n        edgeIn = JSON.stringify(edgeIn);\n//////////////////////////////////////////////////////\n        window.layer.load(1, {shade: [0.4,'#fff']});\n        $.ajax({\n            type:\"POST\",\n            url:\"http://localhost:3001/data\",\n            //url:\"/data\",\n            data:{edgeIn:edgeIn,pointIn:pointIn,globalIn:globalIn,sName:start_index,eName:end_index,algo:window.algo,placesName:placesName,unvisiableID:unvisiableID,repaint:window.repaint},\n            success: function(json){\n                if(window.repaint)                         //如果是重绘\n                    window.repaint=null;\n                //console.log(_name);\n                //console.log({start_index, end_index});\n                //console.log(json);\n                // //stepData包括code、steps  //stepData是C++计算传回的数据,根据stepData,前端做出相应动作\n                stepData = json;  //steps的数据是各个动作的含义，比如：\tchangeNodeColor(2,RGB(255,0,0))\tAnimation\t8\n                layer.closeAll();\n                \n                let actions=[];\n                //先读一遍数据，记录每一帧对应的动作编号，便于快进、返回;   同时记录动作内容，用于组件通信\n                for(var i=0;i<stepData.steps.length-1;i++){  //暂未搞懂为什么多了一条动作？？？\n                    //得到该动作对应帧的编号\n                    var stepTemp=stepData.steps[i].split('\\t')[3];    \n                    //将该动作编号纳入帧编号\n                    if(stepTemp in actionStep)\n                        actionStep[stepTemp].push(i);\n                    else{\n                        actionStep[stepTemp]=[];\n                        actionStep[stepTemp].push(i);\n                    }\n                    actions.push(stepData.steps[i].split('\\t')[1]);         //存储动作内容\n                }\n                that.actionGetHandler(actions);                            //动作内容传递给Graphtable组件           \n\n                // 开始动画\n                that.animate();   //不能用this，因为ajax中的this已经不在代表外面的组件了!!!\n            },\n            error: function(){\n                layer.closeAll();\n                layer.msg(\"出错, 提交失败\");\n            }\n        });\n//////////////////////////////////////////////////////\n\n        // that.animate();\n\n    }\n\n    //执行动画\n    //注意：当Question、showHelp、showCode时，之所以return是为了结束当前函数，不再执行当前函数末尾的animate\n    //因为在else if中会使用layer，内部接着使用了setTimeout和animate继续下去\n    animate(){\n        // if(this.state.play!==\"play\")return;\n        //setTimeout(code,millisec), code是要执行的代码，lillisec是遇到setTimer后要等待多少毫秒才执行code!\n        //返回数值id，整型，可用于 取消 setTimeout 设置的函数clearTimeout(id)。也就是这个setTimeout的唯一标示符\n        window.timer = setTimeout(()=>{\n\n            let step = this.getStep(STEP_COUNT);  //获取一帧的全部数据\n            layer.closeAll();\n            STEP_COUNT++;\n            if(step===null){\n                this.stop();\n                return;\n            }\n            let links = this.props.link;  //将要更新的元素\n            let S_NODE = this.state.S_NODE;\n            let S_EDGE=this.state.S_EDGE;\n            let S_NODE_DIS=this.state.S_NODE_DIS;\n            let S_NODE_INFO=this.state.S_NODE_INFO;\n\n            for(var i=0;i<step.types.length;i++){\n                if(step.types[i]===\"changeEdgeColor\"){\n                    let params = step.infos[i][1].split(\"(\")[1].split(\",\");\n                    params.pop();\n                    let color = step.infos[i][1].split(\"RGB\")[1];\n                    color = this.chooseColor(color);\n                \n                    //改变边的颜色\n                    let name1 = _name[parseInt(params[0])];\n                    let name2 = _name[parseInt(params[1])];\n                    links.forEach(link=>{\n                        if(link.polyline.isVisible()){\n                            if((link.node1.name===name1&&link.node2.name===name2)||(link.node1.name===name2&&link.node2.name===name1)){\n                                link.polyline.setStrokeColor(color);\n                            }\n                        }\n                    });\n                    //this.props.updateState(null, links);\n                }\n                else if(step.types[i]===\"changeNodeColor\"){\n                    let idx = step.infos[i][1].split(\"(\")[1].split(\",\")[0];\n                    idx = parseInt(idx);\n                    let color = step.infos[i][1].split(\"RGB\")[1];\n                    color = this.chooseColor(color);\n                    let name = _name[idx];  //找到编号对应的点名\n                    S_NODE.set(name,color);  //S_NODE是键值对，改变name对应点的状态\n                    //this.setState({S_NODE});\n                }\n                else if(step.types[i]===\"changeEdgeLength\"){\n                    //\"20\tchangeEdgeLength(0,1,1173)\tAnimation\t2\";\n                    var params=step.infos[i][1].split('(')[1].split(')')[0].split(','); //获取点编号、边距离\n                    let name1 = _name[parseInt(params[0])];  //起点编号\n                    let name2 = _name[parseInt(params[1])];　\n                   let dis=parseFloat(params[2]);\n                   S_EDGE.set(dis,[name1,name2]);\n                \n                }\n                else if(step.types[i]===\"changeNodeDist\"){\n                    var params=step.infos[i][1].split('(')[1].split(')')[0].split(',');\n                    let idx=parseInt(params[0]);  //点的编号\n                    let distance=parseFloat(params[1]);\n                    let name=_name[idx];   //点名\n                    S_NODE_DIS.set(name,distance);\n                }\n                else if(step.types[i]===\"showCode\"){\n                    var that=this;\n                    var param=step.infos[i][1].split('(')[1].split(')')[0];\n                    var codeName=\"code\"+param+\".txt\";\n                    $.ajax({\n                        type:\"POST\",\n                        url:\"http://localhost:3001/code\",\n                        //url:\"/code\",\n                        data:{codeName:codeName},\n                        success: function(code){\n                        that.codeChangeHandler(code);   //不能用this，因为ajax中的this已经不在代表外面的组件了!!!???\n                        },\n                        error: function(){\n                            console.log('获取代码失败！');\n                        }\n                    });\n                }\n                else if(step.types[i]===\"showHelp\"){\n                    let msg = step.infos[i][1].split(\"(\")[1].split(\")\")[0];\n                    layer.msg(msg, {time: this.state.speed *3000 +70});   \n                }\n                else if(step.types[i]===\"Question\" && window.question){\n                    let actionID=step.infos[i][0];\n                    let queType=step.infos[i][1].split('(')[1].split(',')[0];       //问题类型\n                    let que=step.infos[i][1].split('(')[1].split(',')[1];        //que对应问题的内容\n                    if(que[0]===\"*\")                    //打个补丁，针对dijkstra提问为：*1*在本次循环后到起点的距离为？　的情况\n                    {\n                       que=que.replace(/\\*/g,\"\");\n                       que=que.replace(que[0],_name[que[0]]);\n                    }\n\n                    let ans = step.infos[i][1].split('(')[1].split(',')[2];     //ans对应动作中给出的答案 \n                    if(ans[0]===\"*\"){                    //标准答案，返回的是 *2* 类型\n                        ans = ans.replace(/\\*/g, \"\");\n                        ans = _name[ans];\n                        return this.ask(que, ans, queType,actionID);   \n                    }\n                    else                                //答案不只一个地点(默认10个和以内),数字转化为文字路径\n                    {\n                        if(Object.is(window.algo,\"dijkstra\"))      //dj数字答案直接返回\n                            return this.ask(que,ans, queType,actionID);\n                        let pathNum=parseInt(ans);\n                        let path_num=[];\n                        let ans_length=ans.length;\n                        while(ans_length>=1)\n                        {\n                            path_num.push(pathNum%10);\n                            pathNum=parseInt(pathNum/10);   //js竟然不能整除!!!\n                            ans_length--;\n                        }\n\n                        let path_str;\n                        for(let i=path_num.length-1;i>=0;i--)\n                        {\n                            if(i==path_num.length-1)\n                                path_str=_name[path_num[i]]+\"->\";\n                            else if(i==0)   \n                                path_str=path_str+_name[path_num[i]];\n                            else\n                                path_str=path_str+_name[path_num[i]]+\"->\";\n\n                        }\n                        return this.ask(que,path_str, queType,actionID);\n                    }\n                 \n                }\n                else if(step.types[i]===\"showInequality\"){\n                    var params=step.infos[i][1].split('(')[1].split(')')[0].split(',');\n                    let idx=parseInt(params[0]);  //点的编号\n                    let info=params[1];\n                    let name=_name[idx];   //点名\n                    S_NODE_INFO.set(name,info);\n                }\n                else if(step.types[i]===\"InequalityDisapper\"){\n                    var params=step.infos[i][1].split('(')[1].split(')')[0].split(',');\n                    let idx=parseInt(params[0]);  //点的编号\n                    let info='';  //将信息（不等式）置空\n                    let name=_name[idx];   //点名\n                    S_NODE_INFO.set(name,info);\n                }     \n            }\n\n            //对一帧中的各元素统一进行刷新\n            this.props.updateState(null, links);\n            //this.setState({S_NODE});\n            //this.setState({S_EDGE});\n            //this.setState({S_NODE_DIS});\n            //this.setState({S_NODE_INFO});\n            this.setState({S_NODE,S_EDGE,S_NODE_DIS,S_NODE_INFO});\n            this.animate();  //重复执行\n\n        }, this.state.speed *3000 +70);\n    \n    }\n\n   \n    //学长原来是获取每一个动作信息－>此处改为获取每一个步骤(帧)的信息\n    getStep(nStep){\n\n        console.log(\"get step:\"+nStep); //读取一帧的数据\n\n        var types=new Array(); //创建数组，用于保存动作信息\n        var infos=new Array(); \n\n        if(nStep in actionStep){\n            for(var i=0;i<actionStep[nStep].length;i++){\n                let info = stepData.steps[actionStep[nStep][i]].split('\\t');  //第ACTION_COUNT条动作信息(作为数组保存在info)                  \n                let type = info[1].split('(')[0];   //info[1]代表动作的解释：changeNodeColor(4,RGB(91,155,213))；  则type对应changeNodeColor\n                types.push(type);\n                infos.push(info);\n            }\n            return {types, infos};  //返回对象，对象的属性是键值对\n        }\n        return null;\n  \n    }\n\n    chooseColor(color){\n        switch(color){\n            case \"(10,10,10))\": return this.INITIAL_LINK_COLOR;   //初始化边（接近黑色）\n            case \"(91,155,213))\": return this.INITIAL_NODE_COLOR; //初始化点（接近蓝色)\n            case \"(255,0,0))\": return this.SELECTED_LINK_COLOR;    //选中点、边（红色）\n            default: return \"#000000\";\n        }\n    }\n\n    checkLink(link, name1, name2){\n        let node1 = link.node1;\n        let node2 = link.node2;\n        if( (node1.name===name1 && node2.name===name2) || (node1.name===name2 && node2.name===name1) ){\n            return true;\n        }\n        return false;\n    }\n\n    //重置link颜色\n    resetColor(){\n        let links = this.props.link;\n        links.forEach(link=>{\n            if(link.polyline.isVisible())\n                link.polyline.setStrokeColor(this.DEFAULT_LINK_COLOR); \n        });\n        this.props.updateState(null, links);\n    }\n\n    /*获取元素的横坐标*/\n    getLeft(e){\n        var offset=e.offsetLeft;\n        if(e.offsetParent!=null){\n        offset+=this.getLeft(e.offsetParent);\n        } \n        return offset;\n    } \n\n    //设置起点终点\n    setSE(event){\n        event.preventDefault();\n        event.stopPropagation();\n        let that = this;\n        let name = event.target.attributes.id.value.split(\"_\").pop();\n\t\t/*\n\t\tlet menu = new nw.Menu();\n\t\tmenu.append(new nw.MenuItem({\n\t\t\tlabel: '设为起点',\n\t\t\tclick: function(){\n                that.setState({start: name});\n\t\t\t}\n\t\t}));\n\t\tmenu.append(new nw.MenuItem({\n\t\t\tlabel: '设为终点',\n\t\t\tclick: function(){\n                that.setState({end: name});\n\t\t\t}\n\t\t}));\n\t\tmenu.popup(event.clientX, event.clientY);*/\n\t\tlet menu = new MyMenu(\"MyMenu_Node_SVG\");\n\t\tmenu.append([{\n\t\t\tlabel: '设为起点',\n\t\t\tclick: function(){\n                that.setState({start: name});\n\t\t\t}\n        },{\n\t\t\tlabel: '设为终点',\n\t\t\tclick: function(){\n                that.setState({end: name});\n\t\t\t}\n        }]);\n        menu.popup(event.clientX, event.clientY);\n\t\t\n\t\treturn false;\n    }\n\n    //提问\n    ask(que, msg,type,actionID){             //msg是标准答案(转换后的)\n        clearTimeout(window.timer);\n        let that = this;\n        window.layer.prompt({title: que}, function(text, index){\n            layer.closeAll();\n            var visitID=-1;\n            //答对答错都要保存结果(不是重绘的时候才保存！！！)\n           if(!window.repaint)              \n           {\n            $.ajax({                      //需要先从动作表获得最大visitID(因为可能取消了问题而不保存在que表中)\n                type:\"GET\",\n                url:'http://localhost:3001/getVisitID',\n                //url:\"/collect\",\n                data:{},\n                success: function(json){\n                    visitID=parseInt(json.visitID);\n                    $.ajax({                            //ajax是异步的，为了保持同步，保存题目需要写在查询visitID的回调函数中\n                        type:\"POST\",\n                        url:'http://localhost:3001/collectQue',\n                        //url:\"/collect\",\n                        data:{que:que,ans:text,msg:msg,type:type,visitID:visitID,actionID:actionID},\n                        success: function(json){\n                        },\n                        error: function(){\n                        }\n                    });\n                },\n                error: function(){\n                }\n            });\n           }\n            if(text!=msg){\n                window.layer.msg('正确答案：'+msg, {time: 1000});\n                setTimeout(()=>{\n                    that.animate();\n                }, 1100);\n            }else{\n                window.layer.msg('答对了！', {time: 1000});\n                that.animate();\n            }\n        } );\n    }\n\n  \n\n   //**************************************************** by cdz\n    //执行动作：根据STEP_COUNT执行！！！\n    //注意：当Question、showHelp、showCode时，之所以return是为了结束当前函数，不再执行当前函数末尾的animate\n    //因为在else if中会使用layer，内部接着使用了setTimeout和animate继续下去\n\n\n   //倒退:为了减少不必要的理解错误，只能倒退到点和边初始化完成以后\n   animate_back(){\n    //不管处于什么状态，都使其暂停\n    this.setState({play: \"pause\"});\n    clearTimeout(window.timer);\n    layer.closeAll();\n   \n\n    STEP_COUNT--;\n    let back_step = this.getStep(STEP_COUNT);              //获取上一帧的信息\n    if(back_step===null){\n        this.stop();\n        return;\n    }\n\n    let links = this.props.link;                          //将要更新的元素\n    let S_NODE = this.state.S_NODE;\n    let S_EDGE=this.state.S_EDGE;\n    let S_NODE_DIS=this.state.S_NODE_DIS;\n    let S_NODE_INFO=this.state.S_NODE_INFO;\n\n    for(var i=0;i<back_step.types.length;i++){           //扫描一帧的内容\n        console.log(back_step.infos[i])\n        if(back_step.types[i]===\"changeEdgeColor\"){\n            let params = back_step.infos[i][1].split(\"(\")[1].split(\",\");\n            params.pop();\n            //let color =back_step.infos[i][1].split(\"RGB\")[1];\n            let color = this.INITIAL_LINK_COLOR;                //状态返回，即后退\n            \n            //改变边的颜色\n            let name1 = _name[parseInt(params[0])];\n            let name2 = _name[parseInt(params[1])];\n            links.forEach(link=>{\n                if(link.polyline.isVisible()){\n                    if((link.node1.name===name1&&link.node2.name===name2)||(link.node1.name===name2&&link.node2.name===name1)){\n                        link.polyline.setStrokeColor(color);\n                    }\n                }\n             });\n                //this.props.updateState(null, links);\n            }\n        else if(back_step.types[i]===\"changeNodeColor\"){\n            let idx = back_step.infos[i][1].split(\"(\")[1].split(\",\")[0];\n            idx = parseInt(idx);\n            //let color = back_step.infos[i][1].split(\"RGB\")[1];\n            let color = this.INITIAL_NODE_COLOR;\n            let name = _name[idx];  //找到编号对应的点名\n            S_NODE.set(name,color);  //S_NODE是键值对，改变name对应点的状态\n            //this.setState({S_NODE});\n            }\n\n        else if(back_step.types[i]===\"changeEdgeLength\"){\n            //\"20\tchangeEdgeLength(0,1,1173)\tAnimation\t2\";\n            var params=back_step.infos[i][1].split('(')[1].split(')')[0].split(','); //获取点编号、边距离\n            let name1 = _name[parseInt(params[0])];  //起点编号\n            let name2 = _name[parseInt(params[1])];　\n            let dis=parseFloat(params[2]);\n             S_EDGE.set(dis,[name1,name2]); \n        }\n         else if(back_step.types[i]===\"changeNodeDist\"){\n            var params=back_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n            let idx=parseInt(params[0]);  //点的编号\n            let distance=parseFloat(params[1]);\n            let name=_name[idx];   //点名\n            S_NODE_DIS.set(name,distance);\n        }\n        else if(back_step.types[i]===\"showCode\"){\n            var that=this;\n            var param=back_step.infos[i][1].split('(')[1].split(')')[0];\n            var codeName=\"code\"+param+\".txt\";\n            $.ajax({\n                    type:\"POST\",\n                    url:\"http://localhost:3001/code\",\n                    //url:\"/code\",\n                    data:{codeName:codeName},\n                    success: function(code){\n                    that.codeChangeHandler(code);   //不能用this，因为ajax中的this已经不在代表外面的组件了!!!???\n                    },\n                    error: function(){\n                        console.log('获取代码失败！');\n                    }\n            });\n        }\n        else if(back_step.types[i]===\"showHelp\"){\n            let msg =back_step.infos[i][1].split(\"(\")[1].split(\")\")[0];\n            layer.msg(msg, {time: this.state.speed *3000000 +70});  //无限停留\n        }\n        else if(back_step.types[i]===\"Question\" && window.question){\n            let que = back_step.infos[i][2];\n             let ans = back_step.infos[i][3];\n             if(ans[0]===\"*\"){\n                 ans = ans.replace(/\\*/g, \"\");\n                 ans = _name[ans];\n             }\n            return this.ask(que, ans);   \n        }\n         else if(back_step.types[i]===\"showInequality\"){\n            var params=back_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n            let idx=parseInt(params[0]);  //点的编号\n            let info=params[1];\n            let name=_name[idx];   //点名\n            S_NODE_INFO.set(name,info);\n         }\n         else if(back_step.types[i]===\"InequalityDisapper\"){\n            var params=back_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n            let idx=parseInt(params[0]);  //点的编号\n            let info='';  //将信息（不等式）置空\n            let name=_name[idx];   //点名\n            S_NODE_INFO.set(name,info);\n        }\n            \n    }\n    //对一帧中的各元素统一进行刷新\n    this.props.updateState(null, links);\n    //this.setState({S_NODE});\n    //this.setState({S_EDGE});\n    //this.setState({S_NODE_DIS});\n    //this.setState({S_NODE_INFO});\n    this.setState({S_NODE,S_EDGE,S_NODE_DIS,S_NODE_INFO});\n}\n\n    \n   //前进\n   animate_forward(){\n        //不管处于什么状态，都使其暂停\n    this.setState({play: \"pause\"});\n    clearTimeout(window.timer);\n    layer.closeAll();\n\n    STEP_COUNT++;\n    let forward_step = this.getStep(STEP_COUNT);\n    if(forward_step===null){\n        this.stop();\n        return;\n    }\n\n    let links = this.props.link;  //将要更新的元素\n    let S_NODE = this.state.S_NODE;\n    let S_EDGE=this.state.S_EDGE;\n    let S_NODE_DIS=this.state.S_NODE_DIS;\n    let S_NODE_INFO=this.state.S_NODE_INFO;\n\n    for(var i=0;i<forward_step.types.length;i++){\n        if(forward_step.types[i]===\"changeEdgeColor\"){\n            let params = forward_step.infos[i][1].split(\"(\")[1].split(\",\");\n            params.pop();\n            let color =forward_step.infos[i][1].split(\"RGB\")[1];\n            color = this.chooseColor(color);\n            \n            //改变边的颜色\n            let name1 = _name[parseInt(params[0])];\n            let name2 = _name[parseInt(params[1])];\n            links.forEach(link=>{\n                if(link.polyline.isVisible()){\n                    if((link.node1.name===name1&&link.node2.name===name2)||(link.node1.name===name2&&link.node2.name===name1)){\n                        link.polyline.setStrokeColor(color);\n                    }\n                }\n             });\n                //this.props.updateState(null, links);\n            }\n        else if(forward_step.types[i]===\"changeNodeColor\"){\n            let idx = forward_step.infos[i][1].split(\"(\")[1].split(\",\")[0];\n            idx = parseInt(idx);\n            let color =forward_step.infos[i][1].split(\"RGB\")[1];\n            color = this.chooseColor(color);\n            let name = _name[idx];  //找到编号对应的点名\n            S_NODE.set(name,color);  //S_NODE是键值对，改变name对应点的状态\n            //this.setState({S_NODE});\n            }\n        else if(forward_step.types[i]===\"changeEdgeLength\"){\n            //\"20\tchangeEdgeLength(0,1,1173)\tAnimation\t2\";\n            var params=forward_step.infos[i][1].split('(')[1].split(')')[0].split(','); //获取点编号、边距离\n            let name1 = _name[parseInt(params[0])];  //起点编号\n            let name2 = _name[parseInt(params[1])];　\n            let dis=parseFloat(params[2]);\n             S_EDGE.set(dis,[name1,name2]); \n        }\n         else if(forward_step.types[i]===\"changeNodeDist\"){\n            var params=forward_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n            let idx=parseInt(params[0]);  //点的编号\n            let distance=parseFloat(params[1]);\n            let name=_name[idx];   //点名\n            S_NODE_DIS.set(name,distance);\n        }\n        else if(forward_step.types[i]===\"showCode\"){\n            var that=this;\n            var param=forward_step.infos[i][1].split('(')[1].split(')')[0];\n            var codeName=\"code\"+param+\".txt\";\n            $.ajax({\n                    type:\"POST\",\n                    url:\"http://localhost:3001/code\",\n                    //url:\"/code\",\n                    data:{codeName:codeName},\n                    success: function(code){\n                    that.codeChangeHandler(code);   //不能用this，因为ajax中的this已经不在代表外面的组件了!!!???\n                    },\n                    error: function(){\n                        console.log('获取代码失败！');\n                    }\n            });\n        }\n        else if(forward_step.types[i]===\"showHelp\"){\n            let msg =forward_step.infos[i][1].split(\"(\")[1].split(\")\")[0];\n            layer.msg(msg, {time: this.state.speed *300000 +70});  //无限停留\n        }\n        else if(forward_step.types[i]===\"Question\" && window.question){\n            let que = forward_step.infos[i][2];\n             let ans = forward_step.infos[i][3];\n             if(ans[0]===\"*\"){\n                 ans = ans.replace(/\\*/g, \"\");\n                 ans = _name[ans];\n             }\n            return this.ask(que, ans);   \n        }\n         else if(forward_step.types[i]===\"showInequality\"){\n            var params=forward_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n            let idx=parseInt(params[0]);  //点的编号\n            let info=params[1];\n            let name=_name[idx];   //点名\n            S_NODE_INFO.set(name,info);\n         }\n         else if(forward_step.types[i]===\"InequalityDisapper\"){\n            var params=forward_step.infos[i][1].split('(')[1].split(')')[0].split(',');\n            let idx=parseInt(params[0]);  //点的编号\n            let info='';  //将信息（不等式）置空\n            let name=_name[idx];   //点名\n            S_NODE_INFO.set(name,info);\n        }\n            \n    }\n    //对一帧中的各元素统一进行刷新\n    this.props.updateState(null, links);\n    //this.setState({S_NODE});\n    //this.setState({S_EDGE});\n    //this.setState({S_NODE_DIS});\n    //this.setState({S_NODE_INFO});\n    this.setState({S_NODE,S_EDGE,S_NODE_DIS,S_NODE_INFO});\n\n\n}\n\n}\n\n\nclass Node extends React.Component{\n    constructor(props){\n        super(props);\n        this.SELECT_COLOR = \"#300\";\n        this.DEFAULT_COLOR = \"#3C9\";\n    }\n\n    //<g>元素通常用来对相关图形元素进行分组\n    //onContextMenu：对应右击鼠标的响应事件\n    render(){\n        return (\n            <g id={\"node_\"+this.props.name} onContextMenu={this.props.setSE}>\n                <circle id={\"node_circle_\"+this.props.name} cx={this.props.x} cy={this.props.y} r={this.props.r || 20} fill={this.props.color ||　this.DEFAULT_COLOR}></circle>\n                <text id={\"node_text_\"+this.props.name} x={this.props.x} y={this.props.y} fill=\"black\" textAnchor=\"middle\" dominantBaseline=\"middle\" style={{fontSize: \"13px\"}}>{this.props.hide || this.props.name}</text>\n                <text id={\"node_value\"+this.props.name} x={this.props.x} y={this.props.y+10} fill=\"black\" textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize='13px' fill='blue'>{this.props.distance}</text>\n                <text id={\"node_value\"+this.props.name} x={this.props.x+40} y={this.props.y-5} fill=\"black\" textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize='13px' fill='black'>{this.props.info}</text>\n            </g>\n        );\n    }\n    hover(event){\n        console.log(event.target.attributes.fill);\n        console.log(event.target.attributes);\n        let attributes = event.target.attributes;\n    }\n}\n\nclass Link extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.SELECT_COLOR = \"#900\";\n        this.DEFAULT_COLOR = this.props.color;\n    }\n    render(){\n        this.DEFAULT_COLOR = this.props.color;\n         return (\n            <g id={\"link_\"+this.props.from+\"_\"+this.props.to}>\n                 <line x1={this.props.x1} y1={this.props.y1} x2={this.props.x2} y2={this.props.y2} stroke={this.props.color} strokeWidth=\"5\" style={{cursor: \"pointer\"}} onMouseEnter={this.hover.bind(this)} onMouseLeave={this.hover.bind(this)}/>\n                 <text x={(this.props.x1+this.props.x2)/2} y={(this.props.y1+this.props.y2)/2}  style={{fontSize:\"15px\"}}>{this.props.distance}</text>\n             </g>\n        );\n    }\n    hover(event){\n        let attributes = event.target.attributes;\n        attributes.stroke.value===this.SELECT_COLOR ? attributes.stroke.value=this.DEFAULT_COLOR : attributes.stroke.value=this.SELECT_COLOR;\n    }\n}\n\nexport default GraphSVG;"]},"metadata":{},"sourceType":"module"}