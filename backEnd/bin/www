#!/usr/bin/env node
/* eslint-disable */
/**
 * Module dependencies.
 */
//********************************   创建服务、进程，监听端口******************************* */


var app = require('../app'); //app.js是整个网站的入口文件
var debug = require('debug')('app:server');
var http = require('http');
var cluster = require('cluster');
//cluster模块允许设立一个主进程和若干个worker进程，由主进程监控和协调worker进程的运行
//参考:http://javascript.ruanyifeng.com/nodejs/cluster.html#toc1


// 进程数量
var processNum = require('os').cpus().length;
var logger = require('../modules/Logger.js');

process.env.multi = true;

/**
 * 分配进程
 */
if(cluster.isMaster){
  
    logger.info("*********************************");
    logger.info('[START]','multi process');
    logger.info('[matser]','master start');
  
    for(var i=0; i<processNum; i++){
      cluster.fork();
    }
  
    //开始监听
    cluster.on('listening', function(worker, address){
      logger.info("[master] listening : worker:"+worker.id+", pid:"+worker.process.pid+", address:"+address.address+", port:"+address.port);
    });
  
    //退出后2秒重启
    cluster.on('exit', function(worker, code, signal){
      logger.info('核心'+i+' pid:'+ worker.process.pid+' 重启');
      setTimeout(function() {cluster.fork();},2000);
    });
  
  }else if(cluster.isWorker){
    logger.info('[worker]','worker start : '+cluster.worker.id);
    startServer();  //开启服务器，将后面函数的定义
}

function startServer(){
  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3001'); 
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}
